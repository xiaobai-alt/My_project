聚焦爬虫：爬取页面中指定信息

相较于全局爬虫，编码流程有所改变
--指定url
--发送请求
--获取响应数据
--数据解析
--持久化存贮

数据解析分类：
--正则
--bs4
--xpath


bs4进行数据解析
    数据解析原理：
    --解析局部的文本信息
    --1，进行指定标签
    --2.标签或者标签的属性
    --bs4数据解析原理
    --1.实例化一个BeautifulSoup对象，并且对页面源码数据加载到该对象中
    --2通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取

    --环境安装
    --pip install bs4
    --pip install lxml

    如何实例化BeautifulSoup
    --from bs4 import BeautifulSoup
    --对象的实例化
        --1将本地的html文档中的数据加载到该对象中
        fp = open('./test.html','r',encoding='utf-8')
        soup = BeautifulSoup(fp,'lxml')

        --2将互联网上获取的页面源码加载到该对象中
        page_txt = request.text
        soup = BeautifulSoup(page_txt,'lxml')


    -提供的用于数据解析的相关属性和方法

    --soup.tagName 返回html中第一次出现的tagName标签名
    --soup.find('tagName') :等同于soup.tagName
    --soup.find_all('tagName'):返回符合条件的所有标签
    --属性定位：
        --soup.find('tagName',class_='')   #注意下划线

    --soup.select：
        --select('.某种选择器名称（class,id,标签）'):返回列表
        --层级选择器
            --soup.select('.tang（class标签名） > ul > li > a'):每个>表示的是一个层级
            --soup.select('.tang>ul a'):空格表示多个层级


        --获取标签之间的文本数据
            --soup.a.text/string/get_text()  #text与get_text()可以获取标签下所有的文本内容  string只能获取该标签下直系的标签文本
        --获取标签中属性值
            --soup.a['href']



xpath解析：最常用且最便捷的一种解析方式

        --xpath解析原理:
            --1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中
            --2.调用etree对象中的xpath方法结合xpath表达式实现标签的定位和内容的捕获

        --环境安装：

                --pip install lxml
        --如何实例化etree对象:from lxml import etree
            --1.将本地的html文档中的源码数据加载到etree对象中：
                etree.parse(filePath)
            --2.将从互联网获取到页面源码加载到该对象：
                etree.HTML('page_text')

            -xpath('xpath表达式')

            --xpath表达式：
                --/：表示从根节点开始定位，表示的是一个层级tree.xpath('/html/body/div')
                --//：表示的是多个层级tree.xpath('/html//div')。也可以表示从任意位置开始定位
                -属性定位：//div[@class=""]     tag[@class=""]
                --索引定位//div[@class=""]/p[a]  索引a从1开始取值
                --取文本：
                    -/text()  获取的是标签中直系的文本内容
                    -//text()  获取的是标签中非直系的文本内容（即所有的文本内容）

                --取属性
                    --/@attrName   如/img/@src

                在使用xpath时，对于网页源码过多的网页复制其源码到新建html文件，借助pycharm中的code，reformat code对其进行格式化方便定位




































